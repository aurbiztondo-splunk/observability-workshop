<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Making Your Observability Cloud Native With OpenTelemetry on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/index.html</link><description>Recent content in Making Your Observability Cloud Native With OpenTelemetry on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing OpenTelemetry Collector Contrib</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/1-installation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/1-installation/index.html</guid><description>1. Downloading the OpenTelemetry Collector Contrib distribution The first step in installing the Open Telemetry Collector is downloading it. For our lab we will use the &amp;lsquo;wget&amp;rsquo; command to download the &amp;lsquo;.deb&amp;rsquo; package from the OpenTelemetry Github repository.
Obtain the .deb package for your platform from the OpenTelemetry Collector Contrib releases page
wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.75.0/otelcol-contrib_0.75.0_linux_amd64.deb 2. Installing the OpenTelemetry Collector Contrib distribution Install the .deb package using dpkg. Not we are installing as root.</description></item><item><title>OpenTelemetry Collector Extensions</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/2-extensions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/2-extensions/index.html</guid><description>Now that we have the OpenTelemetry Collector is installed. Let&amp;rsquo;s take a look at extensions for the OTEL Collector.
Extensions are available primarily for tasks that do not involve processing telemetry data. Examples of extensions include health monitoring, service discovery, and data forwarding. Extensions are optional.
%%{ init:{ &amp;#34;theme&amp;#34;:&amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; style E fill:#e20082,stroke:#333,stroke-width:4px,color:#fff subgraph Collector A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end Extensions are configured in the same config.</description></item><item><title>OpenTelemetry Collector Receivers</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/3-receivers/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/3-receivers/index.html</guid><description>Welcome to the receiver portion of the workshop! This is the starting point of the data pipeline of the OpenTelemetry Collector. Let&amp;rsquo;s dive in.
A receiver, which can be push or pull based, is how data gets into the Collector. Receivers may support one or more data sources. Generally, a receiver accepts data in a specified format, translates it into the internal format and passes it to processors and exporters defined in the applicable pipelines.</description></item><item><title>OpenTelemetry Collector Processors</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/4-processors/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/4-processors/index.html</guid><description>Processors are run on data between being received and being exported. Processors are optional though some are recommended. There are a large number of processors included in the OpenTelemetry contrib Collector.
%%{ init:{ &amp;#34;theme&amp;#34;:&amp;#34;base&amp;#34;, &amp;#34;themeVariables&amp;#34;: { &amp;#34;primaryColor&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;clusterBkg&amp;#34;: &amp;#34;#eff2fb&amp;#34;, &amp;#34;defaultLinkColor&amp;#34;: &amp;#34;#333333&amp;#34; } } }%% flowchart LR; style Processors fill:#e20082,stroke:#333,stroke-width:4px,color:#fff subgraph Collector A[OTLP] --&amp;gt; M(Receivers) B[JAEGER] --&amp;gt; M(Receivers) C[Prometheus] --&amp;gt; M(Receivers) end subgraph Processors M(Receivers) --&amp;gt; H(Filters, Attributes, etc) E(Extensions) end subgraph Exporters H(Filters, Attributes, etc) --&amp;gt; S(OTLP) H(Filters, Attributes, etc) --&amp;gt; T(JAEGER) H(Filters, Attributes, etc) --&amp;gt; U(Prometheus) end Batch Processor By default, only the batch processor is enabled.</description></item><item><title>OpenTelemetry Collector Exporters</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/5-exporters/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/5-exporters/index.html</guid><description>An exporter, which can be push or pull based, is how you send data to one or more backends/destinations. Exporters may support one or more data sources.
For this workshop we will be using the otlphttp exporter. The OpenTelemetry Protocol (OTLP) is a vendor-neutral, standardised protocol for transmitting telemetry data. The OTLP exporter sends data to a server that implements the OTLP protocol. The OTLP exporter supports both gRPC and HTTP/JSON protocols.</description></item><item><title>OpenTelemetry Collector Service</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/6-service/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/6-service/index.html</guid><description>The Service section is used to configure what components are enabled in the Collector based on the configuration found in the receivers, processors, exporters, and extensions sections. If a component is configured, but not defined within the service section then it is not enabled. The service section consists of three sub-sections:
extensions pipelines telemetry In the default configuration the extension section has been configured to enable health_check, pprof and zpages which we configured in the Extensions module earlier.</description></item><item><title>Data Visualisations</title><link>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/7-visualisation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.90/en/conf/opentelemetry-collector/7-visualisation/index.html</guid><description> Attachments dashboard_OTel-Contrib-Dashboard.json (40 KB)</description></item></channel></rss>